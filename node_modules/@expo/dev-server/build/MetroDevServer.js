"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bundleAsync = exports.runMetroDevServerAsync = void 0;
const ExpoMetroConfig = __importStar(require("@expo/metro-config"));
const cli_server_api_1 = require("@react-native-community/cli-server-api");
const body_parser_1 = __importDefault(require("body-parser"));
const resolve_from_1 = __importDefault(require("resolve-from"));
const LogReporter_1 = __importDefault(require("./LogReporter"));
const clientLogsMiddleware_1 = __importDefault(require("./middleware/clientLogsMiddleware"));
async function runMetroDevServerAsync(projectRoot, options) {
    const Metro = importMetroFromProject(projectRoot);
    const reporter = new LogReporter_1.default(options.logger);
    const metroConfig = await ExpoMetroConfig.loadAsync(projectRoot, Object.assign({ reporter }, options));
    const { middleware, attachToServer } = cli_server_api_1.createDevServerMiddleware({
        port: metroConfig.server.port,
        watchFolders: metroConfig.watchFolders,
    });
    middleware.use(body_parser_1.default.json());
    middleware.use('/logs', clientLogsMiddleware_1.default(options.logger));
    const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;
    // @ts-ignore can't mutate readonly config
    metroConfig.server.enhanceMiddleware = (metroMiddleware, server) => {
        if (customEnhanceMiddleware) {
            metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);
        }
        return middleware.use(metroMiddleware);
    };
    const serverInstance = await Metro.runServer(metroConfig, { hmrEnabled: true });
    const { messageSocket, eventsSocket } = attachToServer(serverInstance);
    reporter.reportEvent = eventsSocket.reportEvent;
    return {
        server: serverInstance,
        middleware,
        messageSocket,
    };
}
exports.runMetroDevServerAsync = runMetroDevServerAsync;
let nextBuildID = 0;
// TODO: deprecate options.target
async function bundleAsync(projectRoot, options, bundles) {
    const metro = importMetroFromProject(projectRoot);
    const Server = importMetroServerFromProject(projectRoot);
    const reporter = new LogReporter_1.default(options.logger);
    const config = await ExpoMetroConfig.loadAsync(projectRoot, Object.assign({ reporter }, options));
    const buildID = `bundle_${nextBuildID++}`;
    const metroServer = await metro.runMetro(config, {
        watch: false,
    });
    const buildAsync = async (bundle) => {
        var _a, _b, _c, _d;
        const bundleOptions = Object.assign(Object.assign({}, Server.DEFAULT_BUNDLE_OPTIONS), { bundleType: 'bundle', platform: bundle.platform, entryFile: bundle.entryPoint, dev: (_a = bundle.dev) !== null && _a !== void 0 ? _a : false, minify: (_b = bundle.minify) !== null && _b !== void 0 ? _b : !bundle.dev, inlineSourceMap: false, sourceMapUrl: bundle.sourceMapUrl, createModuleIdFactory: config.serializer.createModuleIdFactory, onProgress: (transformedFileCount, totalFileCount) => {
                if (!options.quiet) {
                    reporter.update({
                        buildID,
                        type: 'bundle_transform_progressed',
                        transformedFileCount,
                        totalFileCount,
                    });
                }
            } });
        reporter.update({
            buildID,
            type: 'bundle_build_started',
            bundleDetails: {
                bundleType: bundleOptions.bundleType,
                platform: bundle.platform,
                entryFile: bundle.entryPoint,
                dev: (_c = bundle.dev) !== null && _c !== void 0 ? _c : false,
                minify: (_d = bundle.minify) !== null && _d !== void 0 ? _d : false,
            },
        });
        const { code, map } = await metroServer.build(bundleOptions);
        const assets = (await metroServer.getAssets(bundleOptions));
        reporter.update({
            buildID,
            type: 'bundle_build_done',
        });
        return { code, map, assets };
    };
    try {
        return await Promise.all(bundles.map((bundle) => buildAsync(bundle)));
    }
    finally {
        metroServer.end();
    }
}
exports.bundleAsync = bundleAsync;
function importMetroFromProject(projectRoot) {
    const resolvedPath = resolve_from_1.default.silent(projectRoot, 'metro');
    if (!resolvedPath) {
        throw new Error('Missing package "metro" in the project at ' +
            projectRoot +
            '. ' +
            'This usually means `react-native` is not installed. ' +
            'Please verify that dependencies in package.json include "react-native" ' +
            'and run `yarn` or `npm install`.');
    }
    return require(resolvedPath);
}
function importMetroServerFromProject(projectRoot) {
    const resolvedPath = resolve_from_1.default.silent(projectRoot, 'metro/src/Server');
    if (!resolvedPath) {
        throw new Error('Missing module "metro/src/Server" in the project. ' +
            'This usually means React Native is not installed. ' +
            'Please verify that dependencies in package.json include "react-native" ' +
            'and run `yarn` or `npm install`.');
    }
    return require(resolvedPath);
}
//# sourceMappingURL=MetroDevServer.js.map